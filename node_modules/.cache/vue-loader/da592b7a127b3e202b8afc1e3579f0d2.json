{"remainingRequest":"C:\\Users\\Administrator\\Desktop\\vue-element-admin-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Administrator\\Desktop\\vue-element-admin-master\\src\\components\\page\\tree3.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Administrator\\Desktop\\vue-element-admin-master\\src\\components\\page\\tree3.vue","mtime":1557223914000},{"path":"C:\\Users\\Administrator\\Desktop\\vue-element-admin-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Desktop\\vue-element-admin-master\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Desktop\\vue-element-admin-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Desktop\\vue-element-admin-master\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nlet id = 1000;\n\nexport default {\n  data() {\n    const data = [\n      {\n        id: 1,\n        label: \"一级 1\",\n        children: [\n          {\n            id: 4,\n            label: \"二级 1-1\",\n            children: [\n              {\n                id: 9,\n                label: \"三级 1-1-1\"\n              },\n              {\n                id: 10,\n                label: \"三级 1-1-2\"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        id: 2,\n        label: \"一级 2\",\n        children: [\n          {\n            id: 5,\n            label: \"二级 2-1\"\n          },\n          {\n            id: 6,\n            label: \"二级 2-2\"\n          }\n        ]\n      },\n      {\n        id: 3,\n        label: \"一级 3\",\n        children: [\n          {\n            id: 7,\n            label: \"二级 3-1\"\n          },\n          {\n            id: 8,\n            label: \"二级 3-2\"\n          }\n        ]\n      }\n    ];\n    return {\n      data4: JSON.parse(JSON.stringify(data)),\n      data5: JSON.parse(JSON.stringify(data)),\n      data6: [{\n          id: 1,\n          label: '一级 1',\n          children: [{\n            id: 4,\n            label: '二级 1-1',\n            children: [{\n              id: 9,\n              label: '三级 1-1-1'\n            }, {\n              id: 10,\n              label: '三级 1-1-2'\n            }]\n          }]\n        }, {\n          id: 2,\n          label: '一级 2',\n          children: [{\n            id: 5,\n            label: '二级 2-1'\n          }, {\n            id: 6,\n            label: '二级 2-2'\n          }]\n        }, {\n          id: 3,\n          label: '一级 3',\n          children: [{\n            id: 7,\n            label: '二级 3-1'\n          }, {\n            id: 8,\n            label: '二级 3-2',\n            children: [{\n             id: 11,\n              label: '三级 3-2-1'\n            }, {\n              id: 12,\n              label: '三级 3-2-2'\n            }, {\n              id: 13,\n              label: '三级 3-2-3'\n            }]\n          }]\n        }]\n    };\n  },\n\n  methods: {\n    append(data) {\n      const newChild = { id: id++, label: \"testtest\", children: [] };\n      if (!data.children) {\n        this.$set(data, \"children\", []);\n      }\n      data.children.push(newChild);\n    },\n\n    remove(node, data) {\n      const parent = node.parent;\n      const children = parent.data.children || parent.data;\n      const index = children.findIndex(d => d.id === data.id);\n      children.splice(index, 1);\n    },\n\n    renderContent(h, { node, data, store }) {\n      return (\n        <span class=\"custom-tree-node\">\n          <span>{node.label}</span>\n          <span>\n            <el-button\n              size=\"mini\"\n              type=\"text\"\n              on-click={() => this.append(data)}\n            >\n              Append\n            </el-button>\n            <el-button\n              size=\"mini\"\n              type=\"text\"\n              on-click={() => this.remove(node, data)}\n            >\n              Delete\n            </el-button>\n          </span>\n        </span>\n      );\n    },\n    handleDragStart(node, ev) {\n        console.log('drag start', node);\n      },\n      handleDragEnter(draggingNode, dropNode, ev) {\n        console.log('tree drag enter: ', dropNode.label);\n      },\n      handleDragLeave(draggingNode, dropNode, ev) {\n        console.log('tree drag leave: ', dropNode.label);\n      },\n      handleDragOver(draggingNode, dropNode, ev) {\n        console.log('tree drag over: ', dropNode.label);\n      },\n      handleDragEnd(draggingNode, dropNode, dropType, ev) {\n        console.log('tree drag end: ', dropNode && dropNode.label, dropType);\n      },\n      handleDrop(draggingNode, dropNode, dropType, ev) {\n        console.log('tree drop: ', dropNode.label, dropType);\n      },\n      allowDrop(draggingNode, dropNode, type) {\n        if (dropNode.data.label === '二级 3-1') {\n          return type !== 'inner';\n        } else {\n          return true;\n        }\n      },\n      allowDrag(draggingNode) {\n        return draggingNode.data.label.indexOf('三级 3-2-2') === -1;\n      }\n    \n  }\n};\n",{"version":3,"sources":["tree3.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4DA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA","file":"tree3.vue","sourceRoot":"src\\components\\page","sourcesContent":["\n<template>\n  <div>\n    <div class=\"custom-tree-container\">\n      <el-row :gutter=\"10\">\n        <el-col :span=\"12\">\n          <div class=\"block\">\n            <p>使用 render-content</p>\n            <el-tree\n              :data=\"data4\"\n              show-checkbox\n              node-key=\"id\"\n              default-expand-all\n              :expand-on-click-node=\"false\"\n              :render-content=\"renderContent\"\n            ></el-tree>\n          </div>\n        </el-col>\n        <el-col :span=\"12\">\n          <div :span=\"12\" class=\"block\">\n            <p>使用 scoped slot</p>\n            <el-tree\n              :data=\"data5\"\n              show-checkbox\n              node-key=\"id\"\n              default-expand-all\n              :expand-on-click-node=\"false\"\n            >\n              <span class=\"custom-tree-node\" slot-scope=\"{ node, data }\">\n                <span>{{ node.label }}</span>\n                <span>\n                  <el-button type=\"text\" size=\"mini\" @click=\"() => append(data)\">Append</el-button>\n                  <el-button type=\"text\" size=\"mini\" @click=\"() => remove(node, data)\">Delete</el-button>\n                </span>\n              </span>\n            </el-tree>\n          </div>\n        </el-col>\n      </el-row>\n      <el-row>\n          <h4 style=\"padding:10px\">可拖拽节点</h4>\n        <el-tree\n          :data=\"data6\"\n          node-key=\"id\"\n          default-expand-all\n          @node-drag-start=\"handleDragStart\"\n          @node-drag-enter=\"handleDragEnter\"\n          @node-drag-leave=\"handleDragLeave\"\n          @node-drag-over=\"handleDragOver\"\n          @node-drag-end=\"handleDragEnd\"\n          @node-drop=\"handleDrop\"\n          draggable\n          :allow-drop=\"allowDrop\"\n          :allow-drag=\"allowDrag\"\n        ></el-tree>\n      </el-row>\n    </div>\n  </div>\n</template>\n<script>\nlet id = 1000;\n\nexport default {\n  data() {\n    const data = [\n      {\n        id: 1,\n        label: \"一级 1\",\n        children: [\n          {\n            id: 4,\n            label: \"二级 1-1\",\n            children: [\n              {\n                id: 9,\n                label: \"三级 1-1-1\"\n              },\n              {\n                id: 10,\n                label: \"三级 1-1-2\"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        id: 2,\n        label: \"一级 2\",\n        children: [\n          {\n            id: 5,\n            label: \"二级 2-1\"\n          },\n          {\n            id: 6,\n            label: \"二级 2-2\"\n          }\n        ]\n      },\n      {\n        id: 3,\n        label: \"一级 3\",\n        children: [\n          {\n            id: 7,\n            label: \"二级 3-1\"\n          },\n          {\n            id: 8,\n            label: \"二级 3-2\"\n          }\n        ]\n      }\n    ];\n    return {\n      data4: JSON.parse(JSON.stringify(data)),\n      data5: JSON.parse(JSON.stringify(data)),\n      data6: [{\n          id: 1,\n          label: '一级 1',\n          children: [{\n            id: 4,\n            label: '二级 1-1',\n            children: [{\n              id: 9,\n              label: '三级 1-1-1'\n            }, {\n              id: 10,\n              label: '三级 1-1-2'\n            }]\n          }]\n        }, {\n          id: 2,\n          label: '一级 2',\n          children: [{\n            id: 5,\n            label: '二级 2-1'\n          }, {\n            id: 6,\n            label: '二级 2-2'\n          }]\n        }, {\n          id: 3,\n          label: '一级 3',\n          children: [{\n            id: 7,\n            label: '二级 3-1'\n          }, {\n            id: 8,\n            label: '二级 3-2',\n            children: [{\n             id: 11,\n              label: '三级 3-2-1'\n            }, {\n              id: 12,\n              label: '三级 3-2-2'\n            }, {\n              id: 13,\n              label: '三级 3-2-3'\n            }]\n          }]\n        }]\n    };\n  },\n\n  methods: {\n    append(data) {\n      const newChild = { id: id++, label: \"testtest\", children: [] };\n      if (!data.children) {\n        this.$set(data, \"children\", []);\n      }\n      data.children.push(newChild);\n    },\n\n    remove(node, data) {\n      const parent = node.parent;\n      const children = parent.data.children || parent.data;\n      const index = children.findIndex(d => d.id === data.id);\n      children.splice(index, 1);\n    },\n\n    renderContent(h, { node, data, store }) {\n      return (\n        <span class=\"custom-tree-node\">\n          <span>{node.label}</span>\n          <span>\n            <el-button\n              size=\"mini\"\n              type=\"text\"\n              on-click={() => this.append(data)}\n            >\n              Append\n            </el-button>\n            <el-button\n              size=\"mini\"\n              type=\"text\"\n              on-click={() => this.remove(node, data)}\n            >\n              Delete\n            </el-button>\n          </span>\n        </span>\n      );\n    },\n    handleDragStart(node, ev) {\n        console.log('drag start', node);\n      },\n      handleDragEnter(draggingNode, dropNode, ev) {\n        console.log('tree drag enter: ', dropNode.label);\n      },\n      handleDragLeave(draggingNode, dropNode, ev) {\n        console.log('tree drag leave: ', dropNode.label);\n      },\n      handleDragOver(draggingNode, dropNode, ev) {\n        console.log('tree drag over: ', dropNode.label);\n      },\n      handleDragEnd(draggingNode, dropNode, dropType, ev) {\n        console.log('tree drag end: ', dropNode && dropNode.label, dropType);\n      },\n      handleDrop(draggingNode, dropNode, dropType, ev) {\n        console.log('tree drop: ', dropNode.label, dropType);\n      },\n      allowDrop(draggingNode, dropNode, type) {\n        if (dropNode.data.label === '二级 3-1') {\n          return type !== 'inner';\n        } else {\n          return true;\n        }\n      },\n      allowDrag(draggingNode) {\n        return draggingNode.data.label.indexOf('三级 3-2-2') === -1;\n      }\n    \n  }\n};\n</script>\n\n<style>\n.custom-tree-node {\n  flex: 1;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  font-size: 14px;\n  padding-right: 8px;\n}\n</style>"]}]}